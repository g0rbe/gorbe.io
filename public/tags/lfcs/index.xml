<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lfcs on G⌬RBE</title>
    <link>http://localhost:1313/tags/lfcs/</link>
    <description>Recent content in Lfcs on G⌬RBE</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="http://localhost:1313/tags/lfcs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LFCS Commands</title>
      <link>http://localhost:1313/posts/lfcs/commands/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/lfcs/commands/</guid>
      <description>Commands needed for Linux Foundation Certified Sysadmin.</description>
    </item>
    <item>
      <title>Linux Filesystem Hierarchy</title>
      <link>http://localhost:1313/posts/linux/filesystem-hierarchy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/linux/filesystem-hierarchy/</guid>
      <description>UNIX-based operating systems uses one big file system tree, started with the root (/) directory.</description>
    </item>
    <item>
      <title>Linux processes and threads</title>
      <link>http://localhost:1313/posts/linux/processes-and-threads/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/linux/processes-and-threads/</guid>
      <description>Program # a set of instructions that uses internal and/or external data internal data: strings, integers, etc&amp;hellip; external data: databases, files, etc&amp;hellip; Process vs thread #Process # an executing instance of a program each process has its own resource the same program maybe executing more than once simultaneously every process has one or more thread multi-threaded process: multiple flow of execution, every resources are shared between threads heavy weight process: a process with its own resources light weight process: a thread of a process with shared resources with other threads Thread # started from a process can share resources (eg.</description>
    </item>
    <item>
      <title>Linux signals</title>
      <link>http://localhost:1313/posts/linux/signals/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/linux/signals/</guid>
      <description>Signals # signals are used to notify processes about events in Inter Process Communication signal is an asynchronous event: not expected expected, but the time is not know signals are sent from the kernel or from a user process via system call with kill user can send signal to his own processes root can send signal to any process signals can be handled differently by the programmer or resbond acording to the system defaults two signal always use the system default: SIGKILL and SIGSTOP signal has a type and the type is indicate the meaning of the signal signals handle: exceptions detected by the hardware exceptions generated by the environment when signal sent from the kernel: the meaning attached to the signal The full list if signals is here SIGTERM: kills the process gracefully SIGKILL: kills the process immediately SIGRTMIN: no predefined purpose can be stacked, handled in FIFO Reference # LFS201 (this is just my note from LFS201, not meant to replace the original, which is explain better the above) </description>
    </item>
  </channel>
</rss>
